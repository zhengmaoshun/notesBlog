(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{437:function(t,e,s){"use strict";s.r(e);var n=s(35),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("引言\n上篇文章介绍了赋值、浅拷贝和深拷贝，其中介绍了很多赋值和浅拷贝的相关知识以及两者区别，限于篇幅只介绍了一种常用深拷贝方案。")]),t._v(" "),s("p",[t._v("本篇文章会先介绍浅拷贝 Object.assign 的实现原理，然后带你手动实现一个浅拷贝，并在文末留下一道面试题，期待你的评论。")]),t._v(" "),s("p",[t._v("#浅拷贝 Object.assign\n上篇文章介绍了其定义和使用，主要是将所有可枚举属性的值从一个或多个源对象复制到目标对象，同时返回目标对象。（来自 MDN）")]),t._v(" "),s("p",[t._v("语法如下所示：")]),t._v(" "),s("p",[t._v("Object.assign(target, ...sources)")]),t._v(" "),s("p",[t._v("其中 target 是目标对象，sources 是源对象，可以有多个，返回修改后的目标对象 target。")]),t._v(" "),s("p",[t._v("如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后来的源对象的属性将类似地覆盖早先的属性")])])}),[],!1,null,null,null);e.default=r.exports}}]);